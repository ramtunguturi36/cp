**6.permutation of the vertices
import java.util.*;

public class TopologicalSort {

    // Function to add an edge into the graph
    static void addEdge(ArrayList<ArrayList<Integer>> adj, int v, int w) {
        adj.get(v).add(w);
    }

    // Recursive function used by topologicalSort
    static void topologicalSortUtil(int v, boolean visited[], Stack<Integer> stack, ArrayList<ArrayList<Integer>> adj) {
        visited[v] = true;

        for (int i : adj.get(v)) {
            if (!visited[i]) {
                topologicalSortUtil(i, visited, stack, adj);
            }
        }

        stack.push(v);
    }

    static void topologicalSort(int V, ArrayList<ArrayList<Integer>> adj) {
        Stack<Integer> stack = new Stack<>();
        boolean visited[] = new boolean[V];

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                topologicalSortUtil(i, visited, stack, adj);
            }
        }

        while (!stack.isEmpty()) {
            System.out.print(stack.pop() + " ");
        }
    }

    public static void main(String[] args) {
        int V = 6;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        addEdge(adj, 5, 2);
        addEdge(adj, 5, 0);
        addEdge(adj, 4, 0);
        addEdge(adj, 4, 1);
        addEdge(adj, 2, 3);
        addEdge(adj, 3, 1);

        System.out.println("Following is a Topological sort of the given graph:");
        topologicalSort(V, adj);
    }
}

**8.permutation of a string forms a palindrome 

import java.util.*;

public class PermutationPalindrome {

    public static boolean canPermutePalindrome(String s) {
        int bitMask = 0;
        for (int i = 0; i < s.length(); i++) {
            bitMask ^= 1 << (s.charAt(i) - 'a' + 1);
        }
        return Integer.bitCount(bitMask) <= 1;
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println(canPermutePalindrome(sc.next()));
        sc.close();
    }
}

